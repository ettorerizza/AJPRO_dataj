library(rvest)
library(tidyverse)
library(rstudioapi)
set_wd <- function() {
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
print( getwd() )
}
set_wd()
start_url = "https://rwa-ma5.martineproject.be/fr/election?el=CG"
#On récupère les urls des communes
url_communes =
start_url %>%
read_html() %>%
#rappelez-vous : le sélecteur CSS ".normal a" a été retrouvé grâce au selector gadget de Chrome
html_nodes(".normal a")
url_communes
start_url = "https://rwa-ma5.martineproject.be/fr/election?el=CG"
#On récupère les urls des communes
url_communes =
start_url %>%
read_html() %>%
#rappelez-vous : le sélecteur CSS ".normal a" a été retrouvé grâce au selector gadget de Chrome
html_nodes(".normal a") %>%
html_attr("href")
url_communes
start_url = "https://rwa-ma5.martineproject.be/fr/election?el=CG"
#On récupère les urls des communes
url_communes =
start_url %>%
read_html() %>%
#rappelez-vous : le sélecteur CSS ".definition__header" a été retrouvé grâce au selector gadget de Chrome
html_nodes(".definition__header") %>%
html_attr("href")
start_url
url_communes
url_communes =
start_url %>%
read_html() %>%
#rappelez-vous : le sélecteur CSS ".definition__header" a été retrouvé grâce au selector gadget de Chrome
html_nodes("a , .definition__data") %>%
html_attr("href")
url_communes
url_communes =
start_url %>%
read_html() %>%
#rappelez-vous : le sélecteur CSS ".definition__header" a été retrouvé grâce au selector gadget de Chrome
html_nodes(".definition__data") %>%
html_attr("href")
url_communes
start_url = "https://rwa-ma5.martineproject.be/fr/election?el=CG"
#On récupère les urls des communes
url_communes =
start_url %>%
read_html() %>%
#rappelez-vous : le sélecteur CSS ".definition__header" a été retrouvé (parès un peu de chipo)
#grâce au selector gadget de Chrome
html_nodes("#block-blockelectionstart a")
url_communes
url_communes =
start_url %>%
read_html() %>%
#rappelez-vous : le sélecteur CSS ".definition__header" a été retrouvé (parès un peu de chipo)
#grâce au selector gadget de Chrome
html_nodes("#block-blockelectionstart a") %>%
html_attr("href")
url_communes
# Start the clock! Pour mesurer le temps que prendra ce script
start_time <- Sys.time()
#On importe les packages nécessaires (A INSTALLER AU BESOIN)
library(rvest)
library(tidyverse)
library(rstudioapi)
#ne faite pas attention aux six lignes de code suivantes.
#elles servent juste à définir automatiquement votre
#répertoire de travail dans le bon dossier,
#ce qui vous évitera des chipotages.
#Votre répértoire de travail (l'endroit où vous pourrez retrouver les résultats)
#sera affiché dans votre concole, en bas.
set_wd <- function() {
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
print( getwd() )
}
set_wd()
#Url de départ. ATTENTION, il faudra la modifier le 14 octobre !
#Ceci correspond à la page de départ, celle contenant les liens vers chaque commune.
start_url = "https://rwa-ma5.martineproject.be/fr/election?el=CG"
#On récupère les urls des communes
url_communes =
start_url %>%
read_html() %>%
#rappelez-vous : le sélecteur CSS ".definition__header" a été retrouvé (parès un peu de chipo)
#grâce au selector gadget de Chrome
html_nodes("#block-blockelectionstart a") %>%
html_attr("href") %>%
#ATTENTION : cette url de base devra aussi être modifiée le 14 octobre !
paste0("https://rwa-ma5.martineproject.be", .)
listes = vector()
for (i in url_communes[1:4]) {
urls = i %>%
read_html() %>%
html_nodes(xpath = "//a[contains(@href,'../preferred/preferred_CGM')]") %>%
html_attr("href") %>%
gsub("../preferred/", "/preferred/", .) %>%
#ATTENTION : cette url de base devra aussi être modifiée le 14 octobre !
paste0("http://electionslocales.wallonie.be/2012/fr/com", .)
listes = c(listes, urls)
}
listes
for (url in url_communes[1:4]) {
urls_listes = url %>%
read_html() %>%
html_nodes(".icon-people") %>%
html_attr("href")}
urls_listes
for (url in url_communes[1:4]) {
urls_listes = url %>%
read_html() %>%
html_nodes(".button-icon -primary") %>%
html_attr("href")}
urls_listes
for (url in url_communes[1:4]) {
urls_listes = url %>%
read_html() %>%
html_nodes(".button-icon-primary") %>%
html_attr("href")}
urls_listes
for (url in url_communes[1:4]) {
urls_listes = url %>%
read_html() %>%
html_nodes(".text-center") %>%
html_attr("href")}
urls_listes
for (url in url_communes[1:4]) {
urls_listes = url %>%
read_html() %>%
html_nodes(".text-center")
}
urls_listes
for (url in url_communes[1:4]) {
urls_listes = url %>%
read_html() %>%
html_nodes(".text-center a") %>%
html_attr("href")}
urls_listes
# Start the clock! Pour mesurer le temps que prendra ce script
start_time <- Sys.time()
#On importe les packages nécessaires (A INSTALLER AU BESOIN)
library(rvest)
library(tidyverse)
library(rstudioapi)
#ne faite pas attention aux six lignes de code suivantes.
#elles servent juste à définir automatiquement votre
#répertoire de travail dans le bon dossier,
#ce qui vous évitera des chipotages.
#Votre répértoire de travail (l'endroit où vous pourrez retrouver les résultats)
#sera affiché dans votre concole, en bas.
set_wd <- function() {
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
print( getwd() )
}
set_wd()
#Url de départ. ATTENTION, il faudra la modifier le 14 octobre !
#Ceci correspond à la page de départ, celle contenant les liens vers chaque commune.
#ATTENTION, ces deux URL devront être modifiées le 14 octobre !
start_url = "https://rwa-ma5.martineproject.be/fr/election?el=CG"
base_url = "https://rwa-ma5.martineproject.be"
#On récupère les urls des communes
url_communes =
start_url %>%
read_html() %>%
#rappelez-vous : le sélecteur CSS ".definition__header" a été retrouvé (parès un peu de chipo)
#grâce au selector gadget de Chrome
html_nodes("#block-blockelectionstart a") %>%
html_attr("href") %>%
paste0(base_url, .)
#On récupère les URLs des listes électorales de chaque commune
listes = vector()
for (url in url_communes[1:4]) {
urls_listes = url %>%
read_html() %>%
html_nodes(".text-center a") %>%
html_attr("href") %>%
gsub("../preferred/", "/preferred/", .) %>%
paste0(base_url, .)
listes = c(listes, urls_listes)
}
listes
for (urls_tables in listes) {
html = urls_tables %>%
read_html()
table = html %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")}
table
for (urls_tables in listes) {
html = urls_tables %>%
read_html()
table = html %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")[[3]]}
for (urls_tables in listes) {
html = urls_tables %>%
read_html()
table = html %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")[3]}
table = html %>%
#même chose : ce sélecteur CSS a été retrouvé grâce au selector gadget
html_node("#block-blockpreferencevotes")
table
html
html %>%
#même chose : ce sélecteur CSS a été retrouvé grâce au selector gadget
html_node("#block-blockpreferencevotes")
table = html %>%
#même chose : ce sélecteur CSS a été retrouvé grâce au selector gadget
html_node("#block-blockpreferencevotes")[3] %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")
table = html %>%
#même chose : ce sélecteur CSS a été retrouvé grâce au selector gadget
html_node("#block-blockpreferencevotes")[[3]] %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")
table = html %>%
#même chose : ce sélecteur CSS a été retrouvé grâce au selector gadget
html_node("#block-blockpreferencevotes") %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")
table = html %>%
#même chose : ce sélecteur CSS a été retrouvé grâce au selector gadget
html_node(".one-column__body") %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")
table = html %>%
#même chose : ce sélecteur CSS a été retrouvé grâce au selector gadget
html_node("#block-blockpreferencevotes td") %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")
table = html %>%
#même chose : ce sélecteur CSS a été retrouvé grâce au selector gadget
html_node("#block-blockpreferencevotes") %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")
table = html %>%
#même chose : ce sélecteur CSS a été retrouvé grâce au selector gadget
html_node(".table -primary mt-m") %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")
table = html %>%
#même chose : ce sélecteur CSS a été retrouvé grâce au selector gadget
html_node(".table") %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")
table = html %>%
#même chose : ce sélecteur CSS a été retrouvé grâce au selector gadget
html_node(".table__table") %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")
table
table = html %>%
#même chose : ce sélecteur CSS a été retrouvé grâce au selector gadget
html_node("table__body") %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")
table = html %>%
#même chose : ce sélecteur CSS a été retrouvé grâce au selector gadget
html_node(".table__body") %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")
table = html %>%
#même chose : ce sélecteur CSS a été retrouvé grâce au selector gadget
html_node("#block-blockpreferencevotes > div:nth-child(4) > table > tbody") %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")
table = html %>%
#même chose : ce sélecteur CSS a été retrouvé grâce au selector gadget
html_node("#block-blockpreferencevotes > div:nth-child(4)") %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")
table = html %>%
#même chose : ce sélecteur CSS a été retrouvé grâce au selector gadget
html_node("#block-blockpreferencevotes > div") %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")
table = html %>%
#même chose : ce sélecteur CSS a été retrouvé grâce au selector gadget
html_node("#block-blockpreferencevotes") %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")
block_table = html %>%
html_table(header = FALSE,
fill = TRUE,
dec = ",")
table = block_table[[3]]
table
table$commune <- html %>% html_node(".article-dataheader__title") %>% html_text()
table$parti = html %>% html_node(".w-100") %>% html_text()
table$lien = urls_tables
table
block_table = html %>%
html_table(header = TRUE,
fill = TRUE,
dec = ",")
table = block_table[[3]]
table$commune <- html %>% html_node(".article-dataheader__title") %>% html_text()
table$parti = html %>% html_node(".w-100") %>% html_text()
table$lien = urls_tables
table
#On crée une colonne avec les poucentages sous forme de nombres
tables$pourcent_liste = as.numeric(gsub("^([0-9]+),?([0-9]+)?%", "\\1.\\2", tables$pourcent_liste))
#on élimine les mots "Commune de" et on efface les espaces et retour chariot en trop
tables$commune = gsub("Commune de ", "", trimws(tables$commune))
#On crée une colonne avec les poucentages sous forme de nombres
table$pourcent_liste = as.numeric(gsub("^([0-9]+),?([0-9]+)?%", "\\1.\\2", tables$pourcent_liste))
#on élimine les mots "Commune de" et on efface les espaces et retour chariot en trop
table$commune = gsub("Commune de ", "", trimws(tables$commune))
#On crée une colonne avec les poucentages sous forme de nombres
table$pourcent_liste = as.numeric(gsub("^([0-9]+),?([0-9]+)?%", "\\1.\\2", table$pourcent_liste))
#on élimine les mots "Commune de" et on efface les espaces et retour chariot en trop
table$commune = gsub("Commune de ", "", trimws(table$commune))
table
table$liste = paste(commune, parti, sep="-")
table$liste = paste(table$commune, table$parti, sep="-")
table
table$parti = gsub("\\d+ ", "", trimws(table$parti))
table
table$parti = gsub("\d+ ", "", trimws(table$parti))
table$parti = gsub("^\\d+ ", "", trimws(table$parti))
table
# Start the clock! Pour mesurer le temps que prendra ce script
start_time <- Sys.time()
#On importe les packages nécessaires (A INSTALLER AU BESOIN)
library(rvest)
library(tidyverse)
library(rstudioapi)
#ne faite pas attention aux six lignes de code suivantes.
#elles servent juste à définir automatiquement votre
#répertoire de travail dans le bon dossier,
#ce qui vous évitera des chipotages.
#Votre répértoire de travail (l'endroit où vous pourrez retrouver les résultats)
#sera affiché dans votre concole, en bas.
set_wd <- function() {
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
print( getwd() )
}
set_wd()
#Url de départ. ATTENTION, il faudra la modifier le 14 octobre !
#Ceci correspond à la page de départ, celle contenant les liens vers chaque commune.
#ATTENTION, ces deux URL devront être modifiées le 14 octobre !
start_url = "https://rwa-ma5.martineproject.be/fr/election?el=CG"
base_url = "https://rwa-ma5.martineproject.be"
#On récupère les urls des communes
url_communes =
start_url %>%
read_html() %>%
#rappelez-vous : le sélecteur CSS ".definition__header" a été retrouvé (parès un peu de chipo)
#grâce au selector gadget de Chrome
html_nodes("#block-blockelectionstart a") %>%
html_attr("href") %>%
paste0(base_url, .)
#On récupère les URLs des listes électorales de chaque commune
listes = vector()
for (url in url_communes) {
urls_listes = url %>%
read_html() %>%
html_nodes(".text-center a") %>%
html_attr("href") %>%
gsub("../preferred/", "/preferred/", .) %>%
paste0(base_url, .)
listes = c(listes, urls_listes)
}
#On récupère les tableaux de résultats qu'on stocke dans une seule liste
tables = vector()
for (urls_tables in listes) {
html = urls_tables %>%
read_html()
block_table = html %>%
html_table(header = TRUE,
fill = TRUE,
dec = ",")
table = block_table[[3]]
#on crée trois colonnes avec le nom de la commune, le nom de la liste et l'URL de la page
table$commune <- html %>% html_node(".article-dataheader__title") %>% html_text()
table$parti = html %>% html_node(".w-100") %>% html_text()
table$lien = urls_tables
tables = rbind(tables, table)
}
#########################################################################
#La partie qui suit est du nettoyage de données. Elle pourrait très bien
#être effectuée dans OpenRefine, voire dans Excel. Mais ceci vous fera gagner du temps.
#########################################################################
#On crée une colonne avec les poucentages sous forme de nombres
tables$pourcent_liste = as.numeric(gsub("^([0-9]+),?([0-9]+)?%", "\\1.\\2", tables$pourcent_liste))
#on élimine les mots "Commune de" et on efface les éventuels espaces en trop
tables$commune = gsub("Commune de ", "", trimws(tables$commune))
#on enlève le numéro devant le nom de parti
tables$parti = gsub("^\\d+ ", "", trimws(tables$parti))
#on crée une colonne "liste" en concaténant commune et parti
tables$liste = paste(tables$commune, table$parti, sep="-")
# Stop the clock : affichera dans la console le temps d'execution (environ 5 minutes)
Sys.time() - start_time
#On sauvegarde les tables de résultats dans un csv "Excel compatible"
write_exel_csv(tables, "scraping_2018.csv")
write_excel_csv(tables, "scraping_2018.csv")
